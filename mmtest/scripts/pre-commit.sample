#! /usr/bin/env python

# MechMania 18 Pre-Commit hook script to ensure proper branching and
# testing conventions are followed.

# Author: Dylan Nugent

# To enable this hook, rename this file to "pre-commit" and place it in
# your .git/hooks directory

import sys
import subprocess
import unittest

from subprocess import CalledProcessError
from mmtest import test_suite

def process_branch():
	"""Get the branch the user is currently on.

	Attempts to probe git to recover the branch. Will bail out of program
	if this fails, either by git returning a nonzero exit status or an
	empty branch name.

	Returns a string containing the name of the current branch.
	"""

	try:
		# --abbrev-ref gives us the branch that HEAD is on
		# See man git-rev-parse for details
		branch = subprocess.check_output("git rev-parse --abbrev-ref HEAD", shell=True)
		branch = branch.rstrip()
	except CalledProcessError:
		print "Grabbing branch returned with nonzero exit status"
		print "Are you on a valid git repository?"
		bail()

	# If we failed to get the branch, bail
	if branch is None or branch == "":
		print "Unable to grab branch"
		print "Unexpected error, please report this"
		bail()

	return branch

def parse_file_to_list(filename):
	"""Parse a file into a list of branches.

	Reads a file that contains names of branches seperated by newlines.
	Bails out on an invalid filename (file does not exist) or if the file
	cannot be read (bad permissions or file in wrong format or corrupted).

	filename - Path to the file being parsed

	Returns a list containing each branch in the file.
	"""

	try:
		branch_file = open(filename)
		branch_list = []
		for line in branch_file:
			# Add the branch to the list, stripped of whitespace
			branch_list.append(line.rstrip())
	except NameError:
		print "Invalid filename caught"
		print "Ensure you have the required branch list files from the repo"
		bail()
	except IOError:
		print "File could not be read"
		print "Ensure you have valid branch list files from the repo"
		bail()

	return branch_list

def bail():
	"""Cancel out of the commit process.

	Prints a boilerplate failure message and then returns exit status of 1
	to the command line. If running as a commit hook, a nonzero exit status
	will cancel the commit process.
	"""

	print
	print "Commit failed, bailing out"
	sys.exit(1)

if __name__ == '__main__':
	# Run the pre-commit hook
	branch = process_branch()
	main_list = parse_file_to_list("main_branches")
	core_list = parse_file_to_list("core_branches")

	if branch in main_list:
		print "You cannot commit directly to a main branch"
		print "Commit to a core branch and pull request on github"
		bail()

	if branch in core_list:
		result = test_suite.run_suite()
		if result.errors or result.failures:
			print "One or more test cases failed on a core branch"
			print "Core branches must have working test cases and code"
			bail()

	print "Everything looks good, proceeding with commit"
	sys.exit(0)
